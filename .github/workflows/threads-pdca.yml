name: Threads PDCA Automation

on:
  # 投稿チェック（5分おきに実行）
  schedule:
    # GitHub Actionsのcronは不安定なため、5分おきに実行
    # 実際の投稿は1日25件制限で制御
    - cron: '*/10 * * * *'

    # 毎朝のレポート投稿（日本時間 9時）
    - cron: '0 0 * * *'

    # 3日ごとにPDCAレポート生成（日本時間 20時）
    - cron: '0 11 */3 * *'

  # 手動実行
  workflow_dispatch:
    inputs:
      mode:
        description: '実行モード'
        required: false
        default: 'post'
        type: choice
        options:
          - post
          - daily-report
          - pdca
          - full-cycle

permissions:
  contents: write

jobs:
  # 投稿ジョブ（1日4回）
  post-threads:
    runs-on: ubuntu-latest
    # 投稿時刻に実行、またはpost/full-cycleモード
    if: |
      github.event_name == 'schedule' ||
      (github.event_name == 'workflow_dispatch' &&
       (github.event.inputs.mode == 'post' || github.event.inputs.mode == 'full-cycle'))

    steps:
      - name: リポジトリをチェックアウト (automation ブランチ)
        uses: actions/checkout@v3
        with:
          ref: automation
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Python環境をセットアップ
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: 依存関係をインストール
        run: pip install requests

      - name: Git設定
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: シンプル投稿スクリプトを実行
        run: python3 threads_simple.py
        env:
          THREADS_ACCESS_TOKEN: ${{ secrets.THREADS_ACCESS_TOKEN }}
          THREADS_USER_ID: ${{ secrets.THREADS_USER_ID }}

      - name: 最終実行時刻をコミット
        if: always()
        run: |
          # .last_posted_at をコミット（実行状態の保存）
          if [ -f .last_posted_at ]; then
            git add .last_posted_at

            # 変更があればコミット
            if ! git diff --quiet HEAD .last_posted_at 2>/dev/null; then
              LAST_TIME=$(cat .last_posted_at)
              git commit -m "Update: Last posted at $LAST_TIME [auto]"
              git push origin automation
              echo "✅ 最終実行時刻を automation ブランチに保存しました"
            else
              echo "📝 変更がないため、コミットをスキップします"
            fi
          else
            echo "⚠️  .last_posted_at ファイルが見つかりません"
          fi

  # PDCAレポート生成ジョブ（3日ごと or 手動）
  pdca-report:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'schedule' && github.event.schedule == '0 11 */3 * *') ||
      (github.event_name == 'workflow_dispatch' &&
       (github.event.inputs.mode == 'pdca' || github.event.inputs.mode == 'full-cycle'))
    
    steps:
      - name: リポジトリをチェックアウト (automation ブランチ)
        uses: actions/checkout@v3
        with:
          ref: automation
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Python環境をセットアップ
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: 依存関係をインストール
        run: pip install requests

      - name: Git設定
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: PDCAレポートを生成
        run: python threads_sqlite.py pdca
        env:
          THREADS_ACCESS_TOKEN: ${{ secrets.THREADS_ACCESS_TOKEN }}
          THREADS_USER_ID: ${{ secrets.THREADS_USER_ID }}

      - name: レポートファイルをコミット
        run: |
          if [ -f pdca_report.md ]; then
            git add pdca_report.md
            git diff --quiet && git diff --staged --quiet || git commit -m "📊 Update PDCA report [auto]"
            git push origin automation || true
          fi
      
      - name: GitHub Issueにレポートを投稿
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            // レポートファイルを読み込み
            let reportContent = '';
            try {
              reportContent = fs.readFileSync('pdca_report.md', 'utf8');
            } catch (error) {
              reportContent = '⚠️ レポートの生成に失敗しました。\n\nエラー: ' + error.message;
            }
            
            // Issueを作成
            const date = new Date().toLocaleDateString('ja-JP');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `📊 PDCA レポート - ${date}`,
              body: reportContent,
              labels: ['pdca-report', 'analytics']
            });
      
      - name: 分析結果を通知（オプション）
        if: always()
        run: |
          echo "✅ PDCAレポートが生成されました"
          echo "📋 Issuesタブで確認してください"
          cat pdca_report.md || echo "レポートファイルが見つかりません"

  # 毎朝のレポート投稿ジョブ（毎日9時 JST）
  daily-report:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'schedule' && github.event.schedule == '0 0 * * *') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.mode == 'daily-report')

    steps:
      - name: リポジトリをチェックアウト (main ブランチ)
        uses: actions/checkout@v3
        with:
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Python環境をセットアップ
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: 依存関係をインストール
        run: pip install requests python-dotenv

      - name: データベースを復元（automationブランチから）
        run: |
          # automationブランチからthreads.dbを取得
          git fetch origin automation
          git checkout origin/automation -- threads.db || echo "⚠️ データベースが見つかりません"

          if [ -f threads.db ]; then
            echo "✅ データベースを復元しました"
          else
            echo "📦 新規データベースを作成します"
            python3 migrate_to_sqlite.py init
            python3 threads_sqlite.py import --csv posts_schedule.csv
          fi

      - name: 毎朝のレポートを生成・投稿
        run: python3 threads_sqlite.py daily-report
        env:
          THREADS_ACCESS_TOKEN: ${{ secrets.THREADS_ACCESS_TOKEN }}
          THREADS_USER_ID: ${{ secrets.THREADS_USER_ID }}

      - name: データベースをautomationブランチに保存
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          # automationブランチに切り替え
          git fetch origin automation
          git checkout automation

          # データベースを追加
          git add threads.db

          if ! git diff --staged --quiet; then
            git commit -m "Update: Daily report posted [auto]"
            git push origin automation
            echo "✅ データベースをautomationブランチに保存しました"
          else
            echo "📝 変更がないため、コミットをスキップします"
          fi
