name: Threads PDCA Automation

on:
  # 1日4回投稿チェック（日本時間 8時、12時、18時、21時）
  schedule:
    - cron: '0 23,3,9,12 * * *'

    # 3日ごとにPDCAレポート生成（日本時間 20時）
    - cron: '0 11 */3 * *'
  
  # 手動実行
  workflow_dispatch:
    inputs:
      mode:
        description: '実行モード'
        required: false
        default: 'post'
        type: choice
        options:
          - post
          - pdca
          - full-cycle

permissions:
  contents: write

jobs:
  # 投稿ジョブ（1日4回）
  post-threads:
    runs-on: ubuntu-latest
    # 23,3,9,12時（UTC）に実行、またはpost/full-cycleモード
    if: |
      (github.event.schedule == '0 23,3,9,12 * * *') ||
      (github.event.schedule == '40 0 * * *') ||
      (github.event_name == 'workflow_dispatch' &&
       (github.event.inputs.mode == 'post' || github.event.inputs.mode == 'full-cycle'))
    
    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Python環境をセットアップ
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: 依存関係をインストール
        run: pip install requests

      - name: 前回のデータベースを復元
        uses: actions/cache@v3
        with:
          path: threads.db
          key: threads-db-v2-${{ github.sha }}
          restore-keys: |
            threads-db-v2-

      - name: データベースを強制再構築（一時的な変更）
        run: |
          echo "🔄 キャッシュをクリアして強制的に再構築します"
          echo "⚠️  この変更は一時的なものです。実行後、元に戻してください。"

          # 既存のデータベースを削除
          rm -f threads.db

          # CSVから新規インポート
          echo "📦 CSVからデータベースを初期化中..."
          python3 migrate_to_sqlite.py init
          python3 threads_sqlite.py import --csv posts_schedule.csv

          # 結果を確認
          TOTAL_PENDING=$(sqlite3 threads.db "SELECT COUNT(*) FROM posts WHERE status='pending'")
          CURRENT_DATE=$(TZ=Asia/Tokyo date '+%Y-%m-%d')
          TODAY_PENDING=$(sqlite3 threads.db "SELECT COUNT(*) FROM posts WHERE status='pending' AND DATE(scheduled_at) = '$CURRENT_DATE'")

          echo "📊 再構築後: pending $TOTAL_PENDING 件 (今日 $TODAY_PENDING 件)"
          echo "✅ データベース初期化完了"

      - name: 投稿スクリプトを実行
        run: python threads_sqlite.py post
        env:
          THREADS_ACCESS_TOKEN: ${{ secrets.THREADS_ACCESS_TOKEN }}
          THREADS_USER_ID: ${{ secrets.THREADS_USER_ID }}

      - name: 投稿履歴を更新・投稿済みをCSVから削除
        if: always()
        run: |
          if [ -f threads.db ]; then
            # 1. 今日のposted投稿を posted_history.csv に追加
            sqlite3 threads.db -header -csv \
              "SELECT csv_id, posted_at FROM posts WHERE status='posted' AND DATE(posted_at) = date('now', '+9 hours')" \
              | tail -n +2 >> posted_history.csv

            # 重複を削除
            sort -u posted_history.csv -o posted_history.csv.tmp
            mv posted_history.csv.tmp posted_history.csv

            # ヘッダーを先頭に追加
            (echo "csv_id,posted_at" && tail -n +2 posted_history.csv | sort -u) > posted_history.csv.tmp
            mv posted_history.csv.tmp posted_history.csv

            # 2. 投稿済みの csv_id を取得
            POSTED_IDS=$(sqlite3 threads.db -csv \
              "SELECT csv_id FROM posts WHERE status='posted' AND DATE(posted_at) = date('now', '+9 hours')" \
              | tr '\n' ',' | sed 's/,$//')

            if [ -n "$POSTED_IDS" ]; then
              echo "📝 投稿済みIDをCSVから削除: $POSTED_IDS"

              # 3. posts_schedule.csv から投稿済みの行を削除
              python3 cleanup_csv.py "$POSTED_IDS"
            fi

            # 4. 変更があればコミット
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"

            if ! git diff --quiet posted_history.csv posts_schedule.csv; then
              POSTED_COUNT=$(tail -n +2 posted_history.csv | wc -l | tr -d ' ')
              REMAINING_COUNT=$(tail -n +2 posts_schedule.csv | wc -l | tr -d ' ')

              git add posted_history.csv posts_schedule.csv
              git commit -m "Update: Posted ${POSTED_COUNT} total, ${REMAINING_COUNT} remaining [skip ci]"
              git push
            fi
          fi

      - name: データベースをキャッシュに保存
        uses: actions/cache/save@v3
        if: always()
        with:
          path: threads.db
          key: threads-db-v2-${{ github.sha }}

  # PDCAレポート生成ジョブ（3日ごと or 手動）
  pdca-report:
    runs-on: ubuntu-latest
    if: |
      (github.event.schedule == '0 11 */3 * *') ||
      (github.event_name == 'workflow_dispatch' && 
       (github.event.inputs.mode == 'pdca' || github.event.inputs.mode == 'full-cycle'))
    
    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Python環境をセットアップ
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: 依存関係をインストール
        run: pip install requests

      - name: 前回のデータベースを復元
        uses: actions/cache@v3
        with:
          path: threads.db
          key: threads-db-v2-${{ github.sha }}
          restore-keys: |
            threads-db-v2-

      - name: PDCAレポートを生成
        run: python threads_sqlite.py pdca
        env:
          THREADS_ACCESS_TOKEN: ${{ secrets.THREADS_ACCESS_TOKEN }}
          THREADS_USER_ID: ${{ secrets.THREADS_USER_ID }}
      
      - name: レポートファイルをコミット
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add pdca_report.md || true
          git diff --quiet && git diff --staged --quiet || git commit -m "📊 Update PDCA report [skip ci]"
          git push || true
      
      - name: GitHub Issueにレポートを投稿
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            // レポートファイルを読み込み
            let reportContent = '';
            try {
              reportContent = fs.readFileSync('pdca_report.md', 'utf8');
            } catch (error) {
              reportContent = '⚠️ レポートの生成に失敗しました。\n\nエラー: ' + error.message;
            }
            
            // Issueを作成
            const date = new Date().toLocaleDateString('ja-JP');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `📊 PDCA レポート - ${date}`,
              body: reportContent,
              labels: ['pdca-report', 'analytics']
            });
      
      - name: 分析結果を通知（オプション）
        if: always()
        run: |
          echo "✅ PDCAレポートが生成されました"
          echo "📋 Issuesタブで確認してください"
          cat pdca_report.md || echo "レポートファイルが見つかりません"
